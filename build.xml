<project name="tuxtwowayroad" default="dist" basedir=".">
	<description>
		Tux Two Way Road - Run  Pinguin Run!!!
	</description>
	<!-- set global properties for this build -->

	<property name="project_name" value="tuxtwowayroad"/>
	<property name="src" location="src"/>
	<property name="test" location="tests"/>
	<property name="build" location="bin"/>
	<property name="dist"  location="dist"/>
	<property name="lib"  location="lib"/>
	<property name="res"  location="res"/>
	<property name="reports" location="reports"/>
	<property name="version" location="0.01"/>
	
	<!-- the names of various distributable files -->
	<property name="jar_name" value="${project_name}.jar"/>
	<property name="war_name" value="${project_name}.war"/>

	<!-- top level targets -->
	<target name="compile" depends="init" description="compile the source code " >
		<javac srcdir="${src}" destdir="${build}">
			<classpath>
			</classpath>
		</javac>
	</target>

	<target name="dist" depends="compile" description="generate the distributable files " >

		<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
	    <jar jarfile="${dist}/${jar_name}" basedir="${build}">
	    	 <fileset dir="${res}"/>
	    	<manifest>
	  	      <attribute name="Specification-Title" value="Example"/>
	  	      <attribute name="Specification-Version" value="${version}"/>
	  	      <attribute name="Specification-Vendor" value="HeuristicaLDA"/>
	  	      <attribute name="Implementation-Title" value="tuxtwowayroad"/>
	  	      <attribute name="Implementation-Version" value="${version} ${TODAY}"/> 
	  	      <attribute name="Implementation-Vendor" value="HeuristicaLDA."/>
	    		<attribute name="Main-Class" value="com.heuristicalda.tuxtwowayroad.main.Main"/>
	        </manifest>
		</jar>

	</target>

	<target name="clean" description="clean up" >
	    <!-- Delete the ${build} and ${dist} directory trees -->
	    <delete dir="${build}"/>
	    <delete dir="${dist}"/>
	    <delete dir="${reports}"/>
	</target>

	<target name="run-tests" depends="compile" description="run your test suite" >
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" >
			<classpath>
				<pathelement path="${build}"/>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
 		  <batchtest fork="yes" todir="${reports}/raw/">
		  	<formatter type="xml"/>
		    <fileset dir="${test}">
		      <include name="**/*Test*.java"/>
		    </fileset>
		  </batchtest>
		</junit>
	</target>

	<target name ="test" depends="run-tests">
		<junitreport todir="${reports}">
		  <fileset dir="${reports}/raw/">
		    <include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${reports}\html\"/>
		</junitreport>
	</target>

	<target name ="run" depends="" description="if this project can be run, run it" >
	</target>

	<!--supporting target init-->
	<target name="init" description="initialize the build environment" >
	    <!-- Create the time stamp -->
	    <tstamp/>
	    <!-- Create directory structures -->
	    <mkdir dir="${build}"/>
	    <mkdir dir="${lib}"/>
	    <mkdir dir="${dist}/lib"/>
	    <mkdir dir="${reports}"/>
	    <mkdir dir="${reports}/raw/"/>
	    <mkdir dir="${reports}/html/"/>
	</target>

	<target name="all" depends="clean, test">
	</target>
	
	<target name="-post-jar">
	     <mkdir dir="${dist.dir}/resources"/>
	     <copy todir="${dist.dir}/resources">
	         <fileset dir="${basedir}/resources" />
	     </copy>
	 </target>
</project>